#!/usr/bin/env ruby

# ----- setup -----

Dir.chdir File.expand_path(__dir__)
require_relative '../../Base/lib/dotenv'
TRIAL_DIR = dotenv_trial_dir(__dir__)

# ----- libraries -----

require_relative '../../Base/lib/exchange'
require_relative '../../Base/lib/trial_settings'
require 'awesome_print'

# ----- info -----

puts "EXCHANGE_DIR=#{Exchange.src_dir}"
puts 'EXERCISE SETTINGS'
ap TrialSettings.settings

# ----- load -----

puts 'LOADING RAILS'
Exchange.load_rails

puts 'LOADING IORA'
require 'iora'

# ----- reset -----

puts 'RESET ALL BUGMARK DATA AND CREATE AN ADMIN USER'
BugmHost.reset

# ----- accounts -----

puts 'CREATE A BUGMARK FUNDER ACCOUNT'
funder = FB.create(:user, balance: 100000, email: 'funder@bugmark.net').user

puts 'CREATE BUGMARK WORKER ACCOUNTS'
TS.participants.each do |email|
  FB.create(:user, email: email.chomp.strip)
  print '.'
end
puts ''

# ----- issues -----

puts 'CLOSE ALL EXERCISE-TAGGED ISSUES THAT ARE OPEN'
`rm -f #{TS.tracker_name}` if TS.tracker_type.to_s == 'yaml'
iora = Iora.new(TS.tracker_type, TS.tracker_name, labels: "EXERCISE")
iora.issues.each do |el|
  iora.close(el['sequence'])
  print '.'
end
puts ''

puts 'LOAD EXERCISE TASKS INTO TRACKER'
task_files = Dir.glob("#{File.expand_path TS.trial_dir}/.trial_data/*TASK*.yml")
task_files.each do |file|
  tasks = YAML.load_file(file)
  tasks.each do |task|
    iora.create(task["title"], task["body"], labels: task["labels"])
    print '.'
  end
end
puts ''

puts 'CREATE A BUGMARK TRACKER'
tracker_uuid = FB.create(:tracker, name: 'Docs').tracker.uuid

puts 'SYNC ALL ISSUES TO BUGMARK'
iora.issues.each do |el|
  base = {"stm_tracker_uuid" => tracker_uuid}
  pkg  = el.merge(base)
  print '.'
  IssueCmd::Sync.new(pkg).project
end
puts ''

# ----- offers -----

puts 'CREATE A BUY-UNFIXED OFFER FOR EACH OPEN ISSUE'
Issue.all.open.each do |issue|
  _name, cat = issue.stm_title.split("_")
  opts = {
    price:          TS.settings.fetch("base_price".to_sym , 1.00)   ,
    volume:         TS.settings.fetch("base_volume".to_sym, 10)     ,
    user_uuid:      funder.uuid                                       ,
    stm_issue_uuid: issue.uuid
  }
  FB.create(:offer_bu, opts).project
  print '.'
end
puts ''

puts 'DONE'
