#!/usr/bin/env ruby

require_relative "./util_base"
require_relative "../.lib/exchange"

require 'awesome_print'

puts "EXCHANGE_DIR=#{Exchange.src_dir}"

puts "EXERCISE SETTINGS"
ap PrepSettings.settings

puts "LOADING RAILS"
Exchange.load_rails

puts "LOADING IORA"
require 'iora'

puts "REMOVE ALL EXISTING EXCHANGE DATA"
BugmHost.reset

puts "CREATE A FUNDER ACCOUNT"
funder = FB.create(:user, balance: 100000, email: 'funder@bugmark.net').user

puts "CLOSE ALL EXISTING ISSUES"
iora = Iora.new(PS.repo_type, PS.repo_name)
iora.issues.each do |el|
  iora.close(el["sequence"])
end

puts "CREATE AN ISSUE FOR EACH PR DOC"
Dir.chdir PS.trial_repo_dir
Dir.glob("*.md").each do |fn|
  body = File.read(fn)
  base, ext = fn.gsub(".md", "").split("_")
  iora.create("#{base}_p#{ext}", body)
end

puts "CREATE AN ISSUE FOR EACH COMMENT DOC"
Dir.chdir ".trial_data"
Dir.glob("*.md").each do |fn|
  body = File.read(fn)
  base, ext = fn.gsub(".md", "").split("_")
  iora.create("#{base}_c#{ext}", body)
end

puts "CREATE A BUGMARK REPO ON THE EXCHANGE"
repo_uuid = FB.create(:repo, name: "Worker1").repo.uuid

puts "SYNC ALL ISSUES TO THE EXCHANGE"
iora.issues.each do |el|
  base = {"stm_repo_uuid" => repo_uuid}
  pkg  = el.merge(base)
  print "."
  IssueCmd::Sync.new(pkg).project
end
puts ""

puts "CREATE A BUY-UNFIXED OFFER FOR EACH OPEN ISSUE"
Issue.all.open.each do |issue|
  _name, cat = issue.stm_title.split("_")
  opts = {
    price:          PS.settings.fetch("#{cat}_price".to_sym , 1.00)   ,
    volume:         PS.settings.fetch("#{cat}_volume".to_sym, 10)     ,
    user_uuid:      funder.uuid                                       ,
    stm_issue_uuid: issue.uuid
  }
  FB.create(:offer_bu, opts).project
  print "."
end
puts ""

puts "DONE"
